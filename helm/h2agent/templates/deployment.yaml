apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "h2agent.name" . }}
  labels:
    {{- include "h2agent.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "h2agent.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "h2agent.selectorLabels" . | nindent 8 }}
      annotations:
        sidecar.istio.io/inject: {{ .Values.global.istio.sidecar.inject | default false | quote }}
    spec:
      volumes:
        - name: {{ include "h2agent.name" . }}-helper-functions-cfg-vol
          configMap:
            name: {{  include "h2agent.name" . | lower | replace "_" "-" }}-helpers-config
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: {{ include "h2agent.name" . }}-helper-functions-cfg-vol
              mountPath: /opt/utils
          args:
            - "--log-level"
            - {{ .Values.h2agent_cl.log_level | quote }}
            {{- if .Values.h2agent_cl.verbose.enabled }}
            - "--verbose"
            {{- end }}
            - "--admin-port"
            - {{ .Values.service.admin_port | quote }}
            - "--server-port"
            - {{ .Values.service.traffic_port | quote }}
            - "--server-api-name"
            - {{ .Values.h2agent_cl.server_api_name | quote }}
            - "--server-api-version"
            - {{ .Values.h2agent_cl.server_api_version | quote }}
            - "--worker-threads"
            - {{ .Values.h2agent_cl.worker_threads | quote }}
            - "--server-threads"
            - {{ .Values.h2agent_cl.server_threads | quote }}
            {{- if ne .Values.h2agent_cl.server_key ""  }}
            - "--server-key"
            - {{ .Values.h2agent_cl.server_key | quote }}
            {{- end }}
            {{- if ne .Values.h2agent_cl.server_crt ""  }}
            - "--server-crt"
            - {{ .Values.h2agent_cl.server_crt | quote }}
            {{- end }}
            {{- if ne .Values.h2agent_cl.server_request_schema ""  }}
            - "--server-request-schema"
            - {{ .Values.h2agent_cl.server_request_schema | quote }}
            {{- end }}
            {{- if ne .Values.h2agent_cl.server_matching ""  }}
            - "--server-matching"
            - {{ .Values.h2agent_cl.server_matching | quote }}
            {{- end }}
            {{- if ne .Values.h2agent_cl.server_provision ""  }}
            - "--server-provision"
            - {{ .Values.h2agent_cl.server_provision | quote }}
            {{- end }}
            {{- if not .Values.h2agent_cl.server_data.enabled }}
            - "--discard-server-data"
            {{- end }}
            {{- if not .Values.h2agent_cl.server_data_requests_history.enabled }}
            - "--discard-server-data-requests-history"
            {{- end }}
            - "--prometheus-port"
            - {{ .Values.service.prometheus_port | quote }}
            {{- if ne .Values.h2agent_cl.prometheus_response_delay_seconds_histogram_boundaries "" }}
            - "--prometheus-response-delay-seconds-histogram-boundaries"
            - {{ .Values.h2agent_cl.prometheus_response_delay_seconds_histogram_boundaries | quote }}
            {{- end }}
            {{- if ne .Values.h2agent_cl.prometheus_message_size_bytes_histogram_boundaries "" }}
            - "--prometheus-message-size-bytes-histogram-boundaries"
            - {{ .Values.h2agent_cl.prometheus_message_size_bytes_histogram_boundaries | quote }}
            {{- end }}

          # livenessProbe & readinessProbe look for admin port, as main app is
          #  blocking on startup and will restart the container in case of crash.
          livenessProbe:
            tcpSocket:
              port: {{ .Values.service.traffic_port }}
            initialDelaySeconds: 10
            periodSeconds: 5
          livenessProbe:
            #httpGet:
            #  path: /healthz
            #  port: {{ .Values.service.admin_port }}
            tcpSocket:
              port: {{ .Values.service.admin_port }}
            initialDelaySeconds: 10
            periodSeconds: 5
          lifecycle:
            postStart:
              exec:
                command: ["/bin/sh", "-c", "if [ -f /config/init.sh ]; then sh /config/init.sh; fi"]
